# -*- coding: utf-8 -*-
"""Lib_Viszualización.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BHO42LuorvPvJ4LI64xtjmYEUnoVHrZI
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Configuración de la página para Streamlit Cloud
st.set_page_config(page_title="NBA Dashboard", layout="wide")

# Cargar el dataset
# Asegúrate de que el archivo CSV esté en el mismo repositorio o ajusta la ruta.
df = pd.read_csv("nba_all_elo.csv")

# Convertir la columna de fecha a datetime si no está convertida
df['date_game'] = pd.to_datetime(df['date_game'])

# ---------------------------------------------------------------------
# BARRA LATERAL
# ---------------------------------------------------------------------
st.sidebar.title("Seleccionar filtros")

# Selector de seasongame (temporada)
seasongames = sorted(df['seasongame'].unique())
seasongame_seleccionado = st.sidebar.selectbox("Seasongame", seasongames)

# Selector de equipo utilizando 'team_id'
equipos = sorted(df['team_id'].unique())
equipo_seleccionado = st.sidebar.selectbox("Team ID", equipos)

# Selector del tipo de juego (Regular, Playoffs o Ambos)
tipo_temporada = st.sidebar.radio("Tipo de Temporada", ("Regular", "Playoffs", "Ambos"))

# ---------------------------------------------------------------------
# FILTRADO DE DATOS
# ---------------------------------------------------------------------
# Filtrar por seasongame y equipo
df_filtrado = df[(df['seasongame'] == seasongame_seleccionado) & (df['team_id'] == equipo_seleccionado)]

# Filtrar por Regular o Playoffs si se selecciona específicamente
if tipo_temporada == "Regular":
    df_filtrado = df_filtrado[df_filtrado['is_playoffs'] == 0]
elif tipo_temporada == "Playoffs":
    df_filtrado = df_filtrado[df_filtrado['is_playoffs'] == 1]
# Si es "Ambos", se usan todos los juegos

# Ordenar por fecha para trazar las líneas cronológicamente
df_filtrado = df_filtrado.sort_values("date_game")

# ---------------------------------------------------------------------
# CÁLCULO DE VICTORIAS Y DERROTAS ACUMULADAS
# ---------------------------------------------------------------------
# Crear columnas binarias de win/loss
df_filtrado['win'] = (df_filtrado['game_result'] == 'W').astype(int)
df_filtrado['loss'] = (df_filtrado['game_result'] == 'L').astype(int)

# Calcular acumulados
df_filtrado['acum_wins'] = df_filtrado['win'].cumsum()
df_filtrado['acum_losses'] = df_filtrado['loss'].cumsum()

# ---------------------------------------------------------------------
# GRÁFICA DE LÍNEAS (VICTORIAS Y DERROTAS ACUMULADAS)
# ---------------------------------------------------------------------
fig, ax = plt.subplots(figsize=(8, 5))
ax.plot(df_filtrado['date_game'], df_filtrado['acum_wins'], label='W', color='blue', marker='o')
ax.plot(df_filtrado['date_game'], df_filtrado['acum_losses'], label='L', color='red', marker='o')
ax.set_title(f"Acumulado de W y L\nTeam: {equipo_seleccionado} - Seasongame: {seasongame_seleccionado}")
ax.set_xlabel("Fecha")
ax.set_ylabel("Juegos acumulados")
ax.legend()
ax.grid(True)
st.pyplot(fig)

# ---------------------------------------------------------------------
# GRÁFICA DE PASTEL (PORCENTAJE DE W Y L)
# ---------------------------------------------------------------------
total_juegos = len(df_filtrado)
total_w = df_filtrado['win'].sum()
total_l = df_filtrado['loss'].sum()

if total_juegos > 0:
    labels = ['W', 'L']
    sizes = [total_w, total_l]
    colors = ['#1f77b4', '#d62728']  # Azul y rojo

    fig2, ax2 = plt.subplots(figsize=(5, 5))
    ax2.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
    ax2.set_title("Porcentaje de W vs L")
    ax2.axis('equal')  # Para que el gráfico sea circular
    st.pyplot(fig2)
else:
    st.write("No hay datos para mostrar con los filtros seleccionados.")